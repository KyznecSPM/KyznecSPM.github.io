---
layout: post
title: "Что такое JWT?"
date: 2019-09-03
author: Emelianov Dmitriy
categories: learning
cover: "/assets/instacode.png"
---

## Что такое JWT? Применение токенов в авторизации пользователя.

Во время прохождения обучающего курса ["MERN Stack Front To Back"](https://www.udemy.com/mern-stack-front-to-back/) у меня возник вопрос с подключенной библиотекой [jsonwebtoken](https://www.npmjs.com/package/jsonwebtoken) и мне захотелось более подробно разобраться как она работает и зачем мы её использовали. Поэтому в данной статье пойдёт речь о том как устроенна аутентификация в обучающем проекте от [Brad Traversy](https://github.com/bradtraversy/devconnector_2.0), что такое JWT (JSON Web Token) и как токен участвует в верификации клиента.

Ниже приведена последовательность операций которые осуществляет REST API серверного приложения devconnector.

![](https://d.radikal.ru/d22/1909/63/e8dd86244434.png)

#### Зачем нужен токен?

В приложении devconnector токен является идентификатором сессии пользователя. При его помощи мы можем верифицировать пользователя и гарантировать, что мы отдадим пользователю именно его данные. При этом токен имеет зашифрованную подпись, что дает некоторую защиту от его подмены на стороне клиента.

Весь этот процесс общения клиента и сервера выглядит примерно так:

![](https://a.radikal.ru/a38/1909/b6/1450b7f77d80.png)

#### Структура JWT.

JWT представляет собой подписанный и/или зашифрованный формат данных описанный стандартом [rfc7519](https://tools.ietf.org/html/rfc7519). Формат данных возможен в двух формах сериализованный и десериализованный. Сериализованный формат используется для передачи токена по сети и выглядит вот так:

`eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJoZWxsbyJ9.v0VYmnlNmDj_MMoxmqOTlxDMBu8HCndSlw8hSpnGt3w`

Десериализовать(прочитать) токен и найти более полную информацию можно на странице [официальной документации](https://jwt.io/#libraries).

Структура сериализованного токена :

`[ Header ].[ Payload ].[ Signature ]`

Структура состоит из трех частей:

- Header - Заголовок (тип токена, алгоритм подписи)
- Payload - Полезная нагрузка (какие либо данные, например id, email, имя...)
- Signature - Подпись (строка, используется для проверки того, что сообщение не было изменено)

Заголовок и полезная нагрузка кодируется в base64-url.
Затем необходимо подписать токен, например используя алгоритм HMAC SHA256, подпись будет сформирована следующим образом:

```
HMACSHA256(
  base64UrlEncode(header) + "." +
  base64UrlEncode(payload),
  secret)
```

#### Пример использования JWT в учебном проекте devconnector.

Библиотека [jsonwebtoken](https://www.npmjs.com/package/jsonwebtoken) является имплементацией стандарта [rfc7519](https://tools.ietf.org/html/rfc7519).

Далее разберем как при помощи этой библиотеки происходит подпись id пользователя и общение между клиентом и сервером.

Код создания токена в роуте регистрации/авторизации:

```
jwt.sign(
        payload,
        'secretWord',
        { expiresIn: 360000 },
        (err, token) => {
          if (err) throw err;
          res.json({ token });
        }
      );
```

В метод sign первым параметром передаём полезную нагрузку, в нашем случае это объект вида:

```
{
    user: {
        id: user.id
    }
}
```

Вторым параметром передаем строку, которая используется в подписи. Третий параметр это опция "срок действия" токена (список всех опций см. в [документации](https://www.npmjs.com/package/jsonwebtoken))

Если все прошло удачно токен записывается в тело ответа и отправляется клиенту.

> _Примечание: на стороне клиента используется React и Redux_

На клиенте при получении ответа в редьюсере отвечающем за события "успешная регистрация", "успешная авторизация" происходит запись токена в localStorage. (оставляю статью на [хабре](https://habr.com/ru/post/349164/), почему хранение токена в localStorage не самая лучшая идея, но по скольку проект учебный тему безопасности можно опустить).

`localStorage.setItem('token', payload.token);`

В корневом компоненте <App /> происходит проверка наличия токена в localStorage и, если он есть, мы записываем его в дефолтный заголовок запроса. Все дальнейшие запросы из приложения будут идти с этим заголовком.

Функция записи токена в заголовок запроса:
_(используется библиотека axios)_

```
const setAuthToken = token => {
  if (token) {
    axios.defaults.headers.common['x-auth-token'] = token;
  } else {
    delete axios.defaults.headers.common['x-auth-token'];
  }
};
```

На строрне сервера все приватные маршруты обрабатываются middleware, который проверяет наличие токена и декодирует из него id пользователя.

```
module.exports = function(req, res, next) {
  // Получаем токен из заголовка
  const token = req.header('x-auth-token');

  // Проверяем присутствие токена
  if (!token) {
    return res.status(401).json({ msg: 'No token, authorization denied' });
  }

  // Верифицируем токен
  try {
    const decoded = jwt.verify(token, config.get('jwtSecret'));

    req.user = decoded.user;
    next();
  } catch (err) {
    res.status(401).json({ msg: 'Token is not valid' });
  }
};
```

Использование JWT позволяет реализовать Private Routing в приложении, об этом пойдет речь в следующем посте.

### Полезные сслылки:

> [1. JWT простым языком: что такое JSON токены и зачем они нужны](https://proglib.io/p/json-tokens/)

> [2. Как использовать jwt? вопрос со stackoverflow](https://ru.stackoverflow.com/questions/858136/Как-использовать-jwt)

> [3. Почему не стоит использовать LocalStorage](https://habr.com/ru/post/349164/)

> [4. Документация JWT](https://jwt.io/)

> [5. Пакет из NPM jsonwebtoken](https://www.npmjs.com/package/jsonwebtoken)

> [6. Курс "MERN Stack Front To Back"](https://www.udemy.com/mern-stack-front-to-back/)
